# test_preference_GP_special_cases.py
# Written Ian Rankin - December 2023
#
# A set of specefic tests to ensure working optimization and convergence.
# Even in some relatively explicit conditions.

import pytest
import lop

import numpy as np

import pdb


def f_sin(x, data=None):
    return 2 * np.cos(np.pi * (x-2)) * np.exp(-(0.9*x))

def test_prior_only():
    X_train = np.array([0,1,2,3,4.2,6,7])

    # Create preference gp and optimize given training data
    gp = lop.PreferenceGP(lop.RBF_kern(0.5, 0.7), normalize_gp=False, normalize_positive=False)
    gp.add(X_train, [])
    gp.optimize(optimize_hyperparameter=False)

    # check that the F values are fairly reasonable (should be close to 0)
    assert (np.abs(gp.F) < 0.05).all()

    X = np.array([1.5, 2.4, 6.7, 2.3])
    mu, sigma = gp.predict(X)

    assert (np.abs(mu) < 0.05).all()
    assert (np.abs(sigma - 0.25) < 0.05).all()




def test_close_pts_K_near_singularity():
    # setup training data
    X_train = np.array([0,1.9999,2,2.0001,4.2,6,7, 4.7])
    y_train = f_sin(X_train)

    pairs = lop.gen_pairs_from_idx(np.argmax(y_train[0:3]), list(range(len(y_train[0:3]))))
    
    pairs2 = lop.gen_pairs_from_idx(np.argmax(y_train[3:5]), list(range(len(y_train[3:5]))))
    pairs2 = [(p[0], p[1]+3, p[2]+3) for p in pairs2]
    pairs += pairs2
    pairs2= lop.gen_pairs_from_idx(np.argmax(y_train[5:]), list(range(len(y_train[5:]))))
    pairs2 = [(p[0], p[1]+5, p[2]+5) for p in pairs2]
    pairs += pairs2

    # Create preference gp and optimize given training data
    gp = lop.PreferenceGP(lop.RBF_kern(0.5, 0.7), normalize_gp=False)
    gp.add(X_train, pairs)
    gp.optimize(optimize_hyperparameter=False)

    assert (np.abs(gp.F) < 20).all()

    # predict output of GP, large set of outputs
    X = np.arange(-0.5, 8, 0.1)
    mu, sigma = gp.predict(X)

    assert (np.abs(mu) < 20).all()

    # predict output of GP small subset
    X = np.array([0.5, 1.5, 3, 4, 5])
    y = f_sin(X)

    mu, sigma = gp.predict(X)

    assert (np.abs(mu-y) < 0.4).all()



def test_pts_that_caused_cov_to_not_be_invertible():
    X_train = np.array([[1.2716495303987287, 0.8950611358215808, ],
                        [1.1359214327832607, 0.9077369108488037, ],
                        [1.3433601132988888, 0.9267454420664476, ],
                        [1.1706777060719962, 0.9411436416582021, ],
                        [1.2314897586057234, 0.9427113617907923, ],
                        [1.350595294746718, 0.8488239034833345, ],
                        [0.6794091992675877, 0.8420272481020651, ],
                        [1.2594230127775785, 0.8325073213099538, ],
                        [0.9659865249641739, 0.9737562064162577, ],
                        [1.312084056565106, 0.7580925144084603, ],
                        [1.1245191682396367, 0.8101055326185537, ],
                        [1.243807869048771, 0.7866001437565573, ],
                        [1.353709163067512, 0.8628198744847765, ],
                        [1.2126233694683775, 0.7900965493709344, ],
                        [1.206670377701751, 0.8200790652888466, ],
                        [1.1169634399898931, 0.885149475526761, ],
                        [0.9865014501369866, 1.0720579906156629, ],
                        [1.1800651025724456, 0.866780411162556, ],
                        [1.1356924698490136, 0.9347387003022511, ],
                        [0.0, 0.0, ],
                        [1.2652386103395346, 0.9161943223850608, ],
                        [1.2872188677976746, 0.8332086750541903, ],
                        [1.2188511132337734, 0.7703351189604835, ],
                        [1.2456395551089958, 0.7806490224522313, ],
                        [1.1709982541601538, 0.837406420496579, ],
                        [1.3862674220481022, 0.8911934179801406, ],
                        [1.2478375800039108, 0.8381799635049467, ],
                        [1.4043810329988542, 0.815685539588621, ],
                        [1.2206828010749502, 0.8108584287778253, ],
                        [1.1103235809898315, 0.853465169932345, ],
                        [1.1042332307365137, 0.8321772732996829, ],
                        [0.8887808717135015, 1.0890037313066827, ],
                        [1.2016790346519766, 0.8358696468724025, ],
                        [1.0629744415984335, 0.9614310892525824, ],
                        [0.8925816209216952, 1.0983584460837452, ],
                        [1.1104151643627902, 0.901651713956316, ],
                        [1.0781774517883473, 1.0044709956882045, ],
                        [1.0806502195793886, 1.0581857929127332, ],
                        [1.21578304505898, 0.836736017602801, ],
                        [1.2047013186598654, 0.8510413968975544, ],
                        [1.2995827593899032, 0.9439180867979908, ],
                        [1.3473247696731812, 0.8693797273146742, ],
                        [1.272840132600889, 0.7982548458143349, ],
                        [1.4107662442771476, 0.8759701069659678, ],
                        [1.2250788439388556, 0.8476893735429736, ],
                        [1.2626742589776512, 0.7776476698637089, ],
                        [1.2557596214624254, 0.952210452863283, ],
                        [1.3104813264142625, 0.8337759220095444, ],
                        [1.3015518267923682, 0.9600799676642571, ],
                        [1.2741223009106686, 0.8307539653343154, ],
                        [1.093472044559686, 0.8633871395823844, ],
                        [1.0991044895738689, 0.9328925295831689, ],
                        [1.0069247571093374, 1.0818871539610027, ],
                        [1.2877225854021188, 0.8319194217351294, ],
                        [1.2743054685470616, 0.9785418574377789, ],
                        [1.3240358037348463, 0.9143893861008698, ],
                        [1.2348783635893124, 0.9819144936487414]])

    gp = lop.PreferenceGP(lop.RBF_kern(0.70334497, 2.08974293))

    gp.X_train = X_train
    gp.y_train = [np.array([[-1,  1,  0],
                        [-1,  1, 38],
                        [-1,  1, 39],
                        [-1,  2, 40],
                        [-1,  2,  3],
                        [-1,  2, 20],
                        [-1, 24, 21],
                        [-1, 24, 22],
                        [-1, 24, 23],
                        [-1, 26, 25],
                        [-1, 26,  4],
                        [-1, 26,  5],
                        [-1,  7,  6],
                        [-1,  7,  8],
                        [-1,  7,  9],
                        [-1, 27, 28],
                        [-1, 29, 42],
                        [-1, 29, 30],
                        [-1, 29, 10],
                        [-1, 31, 11],
                        [-1, 31, 32],
                        [-1, 43, 44],
                        [-1, 43, 45],
                        [-1, 46, 12],
                        [-1, 46, 47],
                        [-1, 46, 48],
                        [-1, 14, 33],
                        [-1, 14, 13],
                        [-1, 34, 51],
                        [-1, 34, 15],
                        [-1, 34, 35],
                        [-1, 18, 16],
                        [-1, 18, 36],
                        [-1, 18, 17],
                        [-1, 52, 53],
                        [-1, 52, 54],
                        [-1, 52, 55]]), None, (np.array([0.5]), np.array([19]))]

    gp.optimize(optimize_hyperparameter=False)

    assert gp is not None
    assert not np.isnan(gp.F).any()